name: E2E Tests

on:
  pull_request:
    branches: [ "main", "feature/*" ]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/e2e-tests.yml"
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - "frontend/**"
  workflow_dispatch: # Allow manual triggering

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Prevent hanging tests from running forever
    
    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Backend setup
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Build SAM application
      run: |
        cd backend
        pip install aws-sam-cli
        sam build -t template.yaml

    # Frontend setup
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install --with-deps chromium # Install only Chromium for faster CI

    # Setup DynamoDB tables
    - name: Configure AWS credentials for DynamoDB local
      run: |
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region us-east-1

    - name: Create DynamoDB tables
      run: |
        # Create all required tables
        aws dynamodb create-table \
          --table-name KidsRewardsUsers \
          --attribute-definitions AttributeName=username,AttributeType=S \
          --key-schema AttributeName=username,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --endpoint-url http://localhost:8000 || true

        aws dynamodb create-table \
          --table-name KidsRewardsStoreItems \
          --attribute-definitions AttributeName=id,AttributeType=S \
          --key-schema AttributeName=id,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --endpoint-url http://localhost:8000 || true

        aws dynamodb create-table \
          --table-name KidsRewardsPurchaseLogs \
          --attribute-definitions \
            AttributeName=id,AttributeType=S \
            AttributeName=user_id,AttributeType=S \
            AttributeName=timestamp,AttributeType=S \
            AttributeName=status,AttributeType=S \
          --key-schema AttributeName=id,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --global-secondary-indexes \
            '[{"IndexName": "UserIdTimestampIndex","KeySchema": [{"AttributeName": "user_id", "KeyType": "HASH"},{"AttributeName": "timestamp", "KeyType": "RANGE"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 5, "WriteCapacityUnits": 5}},{"IndexName": "StatusTimestampIndex","KeySchema": [{"AttributeName": "status", "KeyType": "HASH"},{"AttributeName": "timestamp", "KeyType": "RANGE"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 5, "WriteCapacityUnits": 5}}]' \
          --endpoint-url http://localhost:8000 || true

        aws dynamodb create-table \
          --table-name KidsRewardsChores \
          --attribute-definitions \
            AttributeName=id,AttributeType=S \
            AttributeName=created_by_parent_id,AttributeType=S \
            AttributeName=is_active,AttributeType=S \
          --key-schema AttributeName=id,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --global-secondary-indexes \
            '[{"IndexName": "ParentChoresIndex","KeySchema": [{"AttributeName": "created_by_parent_id", "KeyType": "HASH"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 2, "WriteCapacityUnits": 2}},{"IndexName": "ActiveChoresIndex","KeySchema": [{"AttributeName": "is_active", "KeyType": "HASH"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 2, "WriteCapacityUnits": 2}}]' \
          --endpoint-url http://localhost:8000 || true

        aws dynamodb create-table \
          --table-name KidsRewardsChoreLogs \
          --attribute-definitions \
            AttributeName=id,AttributeType=S \
            AttributeName=kid_id,AttributeType=S \
            AttributeName=submitted_at,AttributeType=S \
            AttributeName=status,AttributeType=S \
          --key-schema AttributeName=id,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --global-secondary-indexes \
            '[{"IndexName": "KidChoreLogIndex","KeySchema": [{"AttributeName": "kid_id", "KeyType": "HASH"},{"AttributeName": "submitted_at", "KeyType": "RANGE"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 2, "WriteCapacityUnits": 2}},{"IndexName": "ChoreLogStatusIndex","KeySchema": [{"AttributeName": "status", "KeyType": "HASH"},{"AttributeName": "submitted_at", "KeyType": "RANGE"}],"Projection": {"ProjectionType": "ALL"},"ProvisionedThroughput": {"ReadCapacityUnits": 2, "WriteCapacityUnits": 2}}]' \
          --endpoint-url http://localhost:8000 || true

        aws dynamodb create-table \
          --table-name KidsRewardsRequests \
          --attribute-definitions \
            AttributeName=id,AttributeType=S \
            AttributeName=requester_id,AttributeType=S \
            AttributeName=created_at,AttributeType=S \
            AttributeName=status,AttributeType=S \
          --key-schema AttributeName=id,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          --global-secondary-indexes \
            '[{"IndexName": "RequesterIdCreatedAtGSI","KeySchema": [{"AttributeName":"requester_id","KeyType":"HASH"}, {"AttributeName":"created_at","KeyType":"RANGE"}],"Projection":{"ProjectionType":"ALL"},"ProvisionedThroughput":{"ReadCapacityUnits":2,"WriteCapacityUnits":2}},{"IndexName": "StatusCreatedAtGSI","KeySchema": [{"AttributeName":"status","KeyType":"HASH"}, {"AttributeName":"created_at","KeyType":"RANGE"}],"Projection":{"ProjectionType":"ALL"},"ProvisionedThroughput":{"ReadCapacityUnits":2,"WriteCapacityUnits":2}}]' \
          --endpoint-url http://localhost:8000 || true

    # Seed test data
    - name: Seed test data
      run: |
        cd backend
        cat > seed_test_data.py << 'PYTHON_SCRIPT'
        import os
        os.environ['DYNAMODB_ENDPOINT_OVERRIDE'] = 'http://localhost:8000'
        os.environ['USERS_TABLE_NAME'] = 'KidsRewardsUsers'
        os.environ['STORE_ITEMS_TABLE_NAME'] = 'KidsRewardsStoreItems'
        os.environ['CHORES_TABLE_NAME'] = 'KidsRewardsChores'
        os.environ['APP_SECRET_KEY'] = 'test-secret-key-for-ci-environment-32chars'
        
        import crud
        import security
        from datetime import datetime
        import uuid
        
        # Create test users
        testparent = crud.create_user('testparent', security.hash_password('password456'), 'parent')
        testkid = crud.create_user('testkid', security.hash_password('password123'), 'kid')
        print('Test users created')
        
        # Create some test chores
        if testparent:
            chore1 = {
                'id': str(uuid.uuid4()),
                'name': 'Clean Room',
                'description': 'Make bed and organize toys',
                'points_value': 10,
                'created_by_parent_id': testparent['id'],
                'created_at': datetime.utcnow().isoformat(),
                'updated_at': datetime.utcnow().isoformat(),
                'is_active': True
            }
            crud.chores_table.put_item(Item=chore1)
            
            chore2 = {
                'id': str(uuid.uuid4()),
                'name': 'Do Homework',
                'description': 'Complete all assignments',
                'points_value': 15,
                'created_by_parent_id': testparent['id'],
                'created_at': datetime.utcnow().isoformat(),
                'updated_at': datetime.utcnow().isoformat(),
                'is_active': True
            }
            crud.chores_table.put_item(Item=chore2)
            print('Test chores created')
        PYTHON_SCRIPT
        python seed_test_data.py

    # Start backend API
    - name: Start backend API
      env:
        APP_SECRET_KEY: test-secret-key-for-ci-environment-32chars
      run: |
        cd backend
        # Create local-env.json for SAM
        cat > local-env.json << EOF
        {
          "KidsRewardsLambdaFunction": {
            "DYNAMODB_ENDPOINT_OVERRIDE": "http://localhost:8000",
            "USERS_TABLE_NAME": "KidsRewardsUsers",
            "STORE_ITEMS_TABLE_NAME": "KidsRewardsStoreItems",
            "PURCHASE_LOGS_TABLE_NAME": "KidsRewardsPurchaseLogs",
            "CHORES_TABLE_NAME": "KidsRewardsChores",
            "CHORE_LOGS_TABLE_NAME": "KidsRewardsChoreLogs",
            "REQUESTS_TABLE_NAME": "KidsRewardsRequests",
            "APP_SECRET_KEY": "test-secret-key-for-ci-environment-32chars"
          }
        }
        EOF
        sam local start-api -t template.yaml \
          --env-vars local-env.json \
          --warm-containers LAZY \
          --parameter-overrides "AppImageUri=kidsrewardslambdafunction:latest TableNamePrefix=local- LocalDynamoDBEndpoint=http://localhost:8000" \
          > backend.log 2>&1 &
        # Wait for backend to be ready
        timeout 60 bash -c 'until curl -sSf http://localhost:3000/hello > /dev/null 2>&1; do echo "Waiting for backend..."; sleep 2; done'
        echo "Backend is ready"

    # Start frontend
    - name: Start frontend server
      run: |
        cd frontend
        PORT=3001 REACT_APP_API_URL=http://localhost:3000 npm start > frontend.log 2>&1 &
        # Wait for frontend to be ready
        timeout 60 bash -c 'until curl -sSf http://localhost:3001 > /dev/null 2>&1; do echo "Waiting for frontend..."; sleep 2; done'
        echo "Frontend is ready"

    # Run E2E tests
    - name: Run E2E tests
      run: |
        cd frontend
        npx playwright test --project=chromium --reporter=list
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3001

    # Upload test results on failure
    - name: Upload Playwright report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 7

    - name: Upload test videos
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-videos
        path: frontend/test-results/
        retention-days: 7

    # Upload logs on failure for debugging
    - name: Upload backend logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: backend-logs
        path: backend/backend.log
        retention-days: 3

    - name: Upload frontend logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-logs
        path: frontend/frontend.log
        retention-days: 3

    # Cleanup
    - name: Stop services
      if: always()
      run: |
        pkill -f "sam local" || true
        pkill -f "npm start" || true
        pkill -f "react-scripts" || true