name: CI Tests and Linting

on:
  push:
    branches: [ "main", "feature/*" ] # Adjust branches as needed
  pull_request:
    branches: [ "main", "feature/*" ] # Adjust branches as needed

jobs:
  backend-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # Ensure this matches your .python-version or project requirement
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with Ruff
      run: ruff check . && ruff format --check .

    - name: Run Pytest
      env:
        APP_SECRET_KEY: ${{ secrets.APP_SECRET_KEY_TEST }} # Needs to be configured in GitHub secrets
      run: pytest

  frontend-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    needs: backend-checks # Optional: run frontend checks only if backend checks pass
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Or your project's Node.js version
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci

    - name: Run React unit/integration tests
      run: npm test -- --watchAll=false # Ensure tests run once and exit

    #- name: Install Playwright Browsers
    #  run: npx playwright install --with-deps

    #- name: Run Playwright E2E tests
    #  env:
    #    PLAYWRIGHT_BASE_URL: http://localhost:3001 # Or your test server URL
        # CI: true # Playwright uses this to adjust some behaviors like retries
    #  run: npm run e2e
      # If your E2E tests require the frontend server to be running:
      # You might need to start your dev server in the background before running e2e tests
      # Example:
      # - name: Start dev server
      #   run: npm start &
      #   env:
      #     PORT: 3001 # Ensure it matches PLAYWRIGHT_BASE_URL
      # - name: Wait for server
      #   run: |
      #     timeout 60 bash -c 'until curl -sSf http://localhost:3001 > /dev/null; do echo "Waiting for server..."; sleep 5; done'
      # - name: Run Playwright E2E tests
      #   run: npm run e2e
      # - name: Stop dev server (if started)
      #   if: always()
      #   run: kill $(lsof -t -i:3001) || true


  # Optional: Job to upload test reports (example for Pytest coverage and Playwright HTML report)
  # upload-reports:
  #   runs-on: ubuntu-latest
  #   needs: [backend-checks, frontend-checks]
  #   if: always() # Run this even if previous jobs fail, to upload any generated reports
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Download backend coverage report
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: backend-coverage-report
  #       path: backend/htmlcov

  #   - name: Upload backend coverage to Codecov (example)
  #     uses: codecov/codecov-action@v4
  #     with:
  #       token: ${{ secrets.CODECOV_TOKEN }} # If using Codecov
  #       files: backend/coverage.xml # Ensure pytest is configured to output this
  #       working-directory: ./backend
  #       fail_ci_if_error: true

  #   - name: Download Playwright HTML report
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: playwright-report
  #       path: frontend/playwright-report

  #   - name: Upload Playwright report as artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: playwright-html-report
  #       path: frontend/playwright-report/
  #       retention-days: 7